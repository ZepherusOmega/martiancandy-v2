{"version":3,"sources":["connection.tsx","MintButton.tsx","MultiMintButton.tsx","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils.ts","candy-machine.ts"],"names":["SequenceType","sendTransactions","connection","wallet","instructionSet","signersSet","a","sequenceType","Parallel","commitment","successCallback","txid","ind","failCallback","block","publicKey","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","instructions","signers","length","transaction","Transaction","forEach","instruction","add","recentBlockhash","blockhash","setSigners","map","s","partialSign","push","signAllTransactions","signedTxns","pendingTxns","breakEarlyObject","breakEarly","console","log","signedTxnPromise","sendSignedTransaction","signedTransaction","then","slot","catch","reason","StopOnFailure","Promise","all","number","txs","getUnixTs","Date","getTime","DEFAULT_TIMEOUT","timeout","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","done","sleep","awaitTransactionSignatureConfirmation","confirmation","Error","err","error","simulateResult","simulateTransaction","value","logs","line","startsWith","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","message","result","queryStatus","status","confirmations","subId","resolve","reject","setTimeout","onSignature","context","e","getSignatureStatuses","signatureStatuses","_signatureSubscriptions","removeSignatureListener","ms","CTAButton","styled","Button","MintButton","onMint","candyMachine","isMinting","isEnded","isActive","isSoldOut","useGateway","requestGatewayToken","gatewayStatus","useState","clicked","setClicked","isVerifying","setIsVerifying","useEffect","GatewayStatus","COLLECTING_USER_INFORMATION","ACTIVE","disabled","state","onClick","gatekeeper","variant","CircularProgress","goLiveDate","Minus","button","Plus","NumericField","input","MultiMintButton","price","mintCount","setMintCount","totalCost","setTotalCost","updateAmounts","qty","Math","round","numericField","document","querySelector","parseInt","isNaN","decrementValue","type","className","step","min","max","onChange","target","updateMintCount","incrementValue","cluster","process","decimals","splTokenName","WalletContainer","div","WalletAmount","Wallet","ul","ConnectButton","WalletMultiButton","NFT","Paper","Card","MintButtonContainer","SolExplorerLink","MainContainer","MintContainer","DesContainer","Price","Chip","Image","img","BorderLinearProgress","LinearProgress","Home","props","balance","setBalance","setIsMinting","setIsActive","solanaExplorerLink","setSolanaExplorerLink","itemsAvailable","setItemsAvailable","itemsRedeemed","setItemsRedeemed","itemsRemaining","setItemsRemaining","setIsSoldOut","payWithSplToken","setPayWithSplToken","setPrice","priceLabel","setPriceLabel","whitelistPrice","setWhitelistPrice","whitelistEnabled","setWhitelistEnabled","isBurnToken","setIsBurnToken","whitelistTokenBalance","setWhitelistTokenBalance","setIsEnded","endDate","setEndDate","isPresale","setIsPresale","isWLOnly","setIsWLOnly","open","severity","undefined","alertState","setAlertState","useAnchorWallet","setCandyMachine","rpcUrl","rpcHost","displaySuccess","mintPublicKey","remaining","throwConfetti","confetti","particleCount","spread","origin","y","mintMany","quantityString","program","quantity","Number","futureBalance","mintMultipleToken","signedTransactions","promiseArray","index","tx","txTimeout","allTransactionsResult","totalSuccess","totalFailure","transactionStatus","retry","getBalance","LAMPORTS_PER_SOL","newBalance","mintOne","mint","anchor","Keypair","generate","mintOneToken","mintTxId","startMint","msg","code","indexOf","getCandyMachineState","candyMachineId","cndy","divider","Array","join","tokenMint","toNumber","whitelistMintSettings","mode","burnEveryTime","presale","discountPrice","getAtaForMint","getTokenAccountBalance","tokenBalance","uiAmount","endSettings","endSettingType","date","toDate","amount","limit","toLocaleString","elevation","label","src","alt","now","onMount","completed","onComplete","renderer","days","hours","minutes","signTransaction","PublicKey","CANDY_MACHINE_PROGRAM","gatekeeperNetwork","clusterUrl","options","autoShowModal","seconds","href","Snackbar","autoHideDuration","onClose","Alert","require","network","Connection","theme","createTheme","palette","overrides","MuiButtonBase","root","justifyContent","MuiButton","textTransform","padding","startIcon","marginRight","endIcon","marginLeft","App","endpoint","useMemo","clusterApiUrl","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolflareWebWallet","getSolletWallet","getSolletExtensionWallet","getSolongWallet","getLedgerWallet","getSafePalWallet","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","CIVIC","buyer","findProgramAddress","toBuffer","TOKEN_PROGRAM_ID","getNetworkExpire","Buffer","from","getNetworkToken","TOKEN_METADATA_PROGRAM_ID","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","anchorWallet","provider","preflightCommitment","fetchIdl","idl","account","fetch","id","treasury","hiddenSettings","getMasterEdition","getMetadata","getCandyMachineCreator","signersMatrix","instructionsMatrix","userTokenAccountAddress","userPayingAccountAddress","candyMachineAddress","remainingAccounts","cleanupInstructions","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","expireOnUse","whitelistToken","whitelistBurnAuthority","getAccountInfo","createApproveInstruction","createRevokeInstruction","transferAuthority","metadataAddress","masterEdition","candyMachineCreator","creatorBump","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","t"],"mappings":"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","file":"static/js/main.4eaa86e7.chunk.js","sourcesContent":["import {\n    Keypair,\n    Commitment,\n    Connection,\n    RpcResponseAndContext,\n    SignatureStatus,\n    SimulatedTransactionResponse,\n    Transaction,\n    TransactionInstruction,\n    TransactionSignature,\n    Blockhash,\n    FeeCalculator,\n  } from '@solana/web3.js';\n  \n  import { WalletNotConnectedError } from '@solana/wallet-adapter-base';\n  \n  interface BlockhashAndFeeCalculator {\n    blockhash: Blockhash;\n    feeCalculator: FeeCalculator;\n  }\n  \n  export const getErrorForTransaction = async (\n    connection: Connection,\n    txid: string,\n  ) => {\n    // wait for all confirmation before geting transaction\n    await connection.confirmTransaction(txid, 'max');\n  \n    const tx = await connection.getParsedConfirmedTransaction(txid);\n  \n    const errors: string[] = [];\n    if (tx?.meta && tx.meta.logMessages) {\n      tx.meta.logMessages.forEach(log => {\n        const regex = /Error: (.*)/gm;\n        let m;\n        while ((m = regex.exec(log)) !== null) {\n          // This is necessary to avoid infinite loops with zero-width matches\n          if (m.index === regex.lastIndex) {\n            regex.lastIndex++;\n          }\n  \n          if (m.length > 1) {\n            errors.push(m[1]);\n          }\n        }\n      });\n    }\n  \n    return errors;\n  };\n  \n  export enum SequenceType {\n    Sequential,\n    Parallel,\n    StopOnFailure,\n  }\n  \n  export async function sendTransactionsWithManualRetry(\n    connection: Connection,\n    wallet: any,\n    instructions: TransactionInstruction[][],\n    signers: Keypair[][],\n  ): Promise<(string | undefined)[]> {\n    let stopPoint = 0;\n    let tries = 0;\n    let lastInstructionsLength = null;\n    let toRemoveSigners: Record<number, boolean> = {};\n    instructions = instructions.filter((instr, i) => {\n      if (instr.length > 0) {\n        return true;\n      } else {\n        toRemoveSigners[i] = true;\n        return false;\n      }\n    });\n    let ids: string[] = [];\n    let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n  \n    while (stopPoint < instructions.length && tries < 3) {\n      instructions = instructions.slice(stopPoint, instructions.length);\n      filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n  \n      if (instructions.length === lastInstructionsLength) tries = tries + 1;\n      else tries = 0;\n  \n      try {\n        if (instructions.length === 1) {\n          const id = await sendTransactionWithRetry(\n            connection,\n            wallet,\n            instructions[0],\n            filteredSigners[0],\n            'single',\n          );\n          ids.push(id.txid);\n          stopPoint = 1;\n        } else {\n          const { txs } = await sendTransactions(\n            connection,\n            wallet,\n            instructions,\n            filteredSigners,\n            SequenceType.StopOnFailure,\n            'single',\n          );\n          ids = ids.concat(txs.map(t => t.txid));\n        }\n      } catch (e) {\n        console.error(e);\n      }\n      console.log(\n        'Died on ',\n        stopPoint,\n        'retrying from instruction',\n        instructions[stopPoint],\n        'instructions length is',\n        instructions.length,\n      );\n      lastInstructionsLength = instructions.length;\n    }\n  \n    return ids;\n  }\n  \n  export const sendTransactions = async (\n    connection: Connection,\n    wallet: any,\n    instructionSet: TransactionInstruction[][],\n    signersSet: Keypair[][],\n    sequenceType: SequenceType = SequenceType.Parallel,\n    commitment: Commitment = 'singleGossip',\n    successCallback: (txid: string, ind: number) => void = (txid, ind) => { },\n    failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\n    block?: BlockhashAndFeeCalculator,\n  ): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\n    if (!wallet.publicKey) throw new WalletNotConnectedError();\n  \n    const unsignedTxns: Transaction[] = [];\n  \n    if (!block) {\n      block = await connection.getRecentBlockhash(commitment);\n    }\n  \n    for (let i = 0; i < instructionSet.length; i++) {\n      const instructions = instructionSet[i];\n      const signers = signersSet[i];\n  \n      if (instructions.length === 0) {\n        continue;\n      }\n  \n      let transaction = new Transaction();\n      instructions.forEach(instruction => transaction.add(instruction));\n      transaction.recentBlockhash = block.blockhash;\n      transaction.setSigners(\n        // fee payed by the wallet owner\n        wallet.publicKey,\n        ...signers.map(s => s.publicKey),\n      );\n  \n      if (signers.length > 0) {\n        transaction.partialSign(...signers);\n      }\n  \n      unsignedTxns.push(transaction);\n    }\n  \n    const signedTxns = await wallet.signAllTransactions(unsignedTxns);\n  \n    const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\n  \n    let breakEarlyObject = { breakEarly: false, i: 0 };\n    console.log(\n      'Signed txns length',\n      signedTxns.length,\n      'vs handed in length',\n      instructionSet.length,\n    );\n    for (let i = 0; i < signedTxns.length; i++) {\n      const signedTxnPromise = sendSignedTransaction({\n        connection,\n        signedTransaction: signedTxns[i],\n      });\n  \n      signedTxnPromise\n        .then(({ txid, slot }) => {\n          successCallback(txid, i);\n        })\n        .catch(reason => {\n          // @ts-ignore\n          failCallback(signedTxns[i], i);\n          if (sequenceType === SequenceType.StopOnFailure) {\n            breakEarlyObject.breakEarly = true;\n            breakEarlyObject.i = i;\n          }\n        });\n  \n      if (sequenceType !== SequenceType.Parallel) {\n        try {\n          await signedTxnPromise;\n        } catch (e) {\n          console.log('Caught failure', e);\n          if (breakEarlyObject.breakEarly) {\n            console.log('Died on ', breakEarlyObject.i);\n            // Return the txn we failed on by index\n            return {\n              number: breakEarlyObject.i,\n              txs: await Promise.all(pendingTxns),\n            };\n          }\n        }\n      } else {\n        pendingTxns.push(signedTxnPromise);\n      }\n    }\n  \n    if (sequenceType !== SequenceType.Parallel) {\n      await Promise.all(pendingTxns);\n    }\n  \n    return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\n  };\n  \n  export const sendTransaction = async (\n    connection: Connection,\n    wallet: any,\n    instructions: TransactionInstruction[],\n    signers: Keypair[],\n    awaitConfirmation = true,\n    commitment: Commitment = 'singleGossip',\n    includesFeePayer: boolean = false,\n    block?: BlockhashAndFeeCalculator,\n  ) => {\n    if (!wallet.publicKey) throw new WalletNotConnectedError();\n  \n    let transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = (\n      block || (await connection.getRecentBlockhash(commitment))\n    ).blockhash;\n  \n    if (includesFeePayer) {\n      transaction.setSigners(...signers.map(s => s.publicKey));\n    } else {\n      transaction.setSigners(\n        // fee payed by the wallet owner\n        wallet.publicKey,\n        ...signers.map(s => s.publicKey),\n      );\n    }\n  \n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n    if (!includesFeePayer) {\n      transaction = await wallet.signTransaction(transaction);\n    }\n  \n    const rawTransaction = transaction.serialize();\n    let options = {\n      skipPreflight: true,\n      commitment,\n    };\n  \n    const txid = await connection.sendRawTransaction(rawTransaction, options);\n    let slot = 0;\n  \n    if (awaitConfirmation) {\n      const confirmation = await awaitTransactionSignatureConfirmation(\n        txid,\n        DEFAULT_TIMEOUT,\n        connection,\n        commitment,\n      );\n  \n      if (!confirmation)\n        throw new Error('Timed out awaiting confirmation on transaction');\n      slot = confirmation?.slot || 0;\n  \n      if (confirmation?.err) {\n        const errors = await getErrorForTransaction(connection, txid);\n  \n        console.log(errors);\n        throw new Error(`Raw transaction ${txid} failed`);\n      }\n    }\n  \n    return { txid, slot };\n  };\n  \n  export const sendTransactionWithRetry = async (\n    connection: Connection,\n    wallet: any,\n    instructions: TransactionInstruction[],\n    signers: Keypair[],\n    commitment: Commitment = 'singleGossip',\n    includesFeePayer: boolean = false,\n    block?: BlockhashAndFeeCalculator,\n    beforeSend?: () => void,\n  ) => {\n    if (!wallet.publicKey) throw new WalletNotConnectedError();\n  \n    let transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = (\n      block || (await connection.getRecentBlockhash(commitment))\n    ).blockhash;\n  \n    if (includesFeePayer) {\n      transaction.setSigners(...signers.map(s => s.publicKey));\n    } else {\n      transaction.setSigners(\n        // fee payed by the wallet owner\n        wallet.publicKey,\n        ...signers.map(s => s.publicKey),\n      );\n    }\n  \n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n    if (!includesFeePayer) {\n      transaction = await wallet.signTransaction(transaction);\n    }\n  \n    if (beforeSend) {\n      beforeSend();\n    }\n  \n    const { txid, slot } = await sendSignedTransaction({\n      connection,\n      signedTransaction: transaction,\n    });\n  \n    return { txid, slot };\n  };\n  \n  export const getUnixTs = () => {\n    return new Date().getTime() / 1000;\n  };\n  \n  const DEFAULT_TIMEOUT = 30000;\n  \n  export async function sendSignedTransaction({\n    signedTransaction,\n    connection,\n    timeout = DEFAULT_TIMEOUT,\n  }: {\n    signedTransaction: Transaction;\n    connection: Connection;\n    sendingMessage?: string;\n    sentMessage?: string;\n    successMessage?: string;\n    timeout?: number;\n  }): Promise<{ txid: string; slot: number }> {\n    const rawTransaction = signedTransaction.serialize();\n    const startTime = getUnixTs();\n    let slot = 0;\n    const txid: TransactionSignature = await connection.sendRawTransaction(\n      rawTransaction,\n      {\n        skipPreflight: true,\n      },\n    );\n  \n    console.log('Started awaiting confirmation for', txid);\n  \n    let done = false;\n    (async () => {\n      while (!done && getUnixTs() - startTime < timeout) {\n        connection.sendRawTransaction(rawTransaction, {\n          skipPreflight: true,\n        });\n        await sleep(500);\n      }\n    })();\n    try {\n      const confirmation = await awaitTransactionSignatureConfirmation(\n        txid,\n        timeout,\n        connection,\n        'recent',\n        true,\n      );\n  \n      if (!confirmation)\n        throw new Error('Timed out awaiting confirmation on transaction');\n  \n      if (confirmation.err) {\n        console.error(confirmation.err);\n        throw new Error('Transaction failed: Custom instruction error');\n      }\n  \n      slot = confirmation?.slot || 0;\n    } catch (err: any) {\n      console.error('Timeout Error caught', err);\n      if (err.timeout) {\n        throw new Error('Timed out awaiting confirmation on transaction');\n      }\n      let simulateResult: SimulatedTransactionResponse | null = null;\n      try {\n        simulateResult = (\n          await simulateTransaction(connection, signedTransaction, 'single')\n        ).value;\n      } catch (e) { }\n      if (simulateResult && simulateResult.err) {\n        if (simulateResult.logs) {\n          for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n            const line = simulateResult.logs[i];\n            if (line.startsWith('Program log: ')) {\n              throw new Error(\n                'Transaction failed: ' + line.slice('Program log: '.length),\n              );\n            }\n          }\n        }\n        throw new Error(JSON.stringify(simulateResult.err));\n      }\n      // throw new Error('Transaction failed');\n    } finally {\n      done = true;\n    }\n  \n    console.log('Latency', txid, getUnixTs() - startTime);\n    return { txid, slot };\n  }\n  \n  async function simulateTransaction(\n    connection: Connection,\n    transaction: Transaction,\n    commitment: Commitment,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    // @ts-ignore\n    transaction.recentBlockhash = await connection._recentBlockhash(\n      // @ts-ignore\n      connection._disableBlockhashCaching,\n    );\n  \n    const signData = transaction.serializeMessage();\n    // @ts-ignore\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = { encoding: 'base64', commitment };\n    const args = [encodedTransaction, config];\n  \n    // @ts-ignore\n    const res = await connection._rpcRequest('simulateTransaction', args);\n    if (res.error) {\n      throw new Error('failed to simulate transaction: ' + res.error.message);\n    }\n    return res.result;\n  }\n  \n  async function awaitTransactionSignatureConfirmation(\n    txid: TransactionSignature,\n    timeout: number,\n    connection: Connection,\n    commitment: Commitment = 'recent',\n    queryStatus = false,\n  ): Promise<SignatureStatus | null | void> {\n    let done = false;\n    let status: SignatureStatus | null | void = {\n      slot: 0,\n      confirmations: 0,\n      err: null,\n    };\n    let subId = 0;\n    status = await new Promise(async (resolve, reject) => {\n      setTimeout(() => {\n        if (done) {\n          return;\n        }\n        done = true;\n        console.log('Rejecting for timeout...');\n        reject({ timeout: true });\n      }, timeout);\n      try {\n        subId = connection.onSignature(\n          txid,\n          (result, context) => {\n            done = true;\n            status = {\n              err: result.err,\n              slot: context.slot,\n              confirmations: 0,\n            };\n            if (result.err) {\n              console.log('Rejected via websocket', result.err);\n              reject(status);\n            } else {\n              console.log('Resolved via websocket', result);\n              resolve(status);\n            }\n          },\n          commitment,\n        );\n      } catch (e) {\n        done = true;\n        console.error('WS error in setup', txid, e);\n      }\n      while (!done && queryStatus) {\n        // eslint-disable-next-line no-loop-func\n        (async () => {\n          try {\n            const signatureStatuses = await connection.getSignatureStatuses([\n              txid,\n            ]);\n            status = signatureStatuses && signatureStatuses.value[0];\n            if (!done) {\n              if (!status) {\n                console.log('REST null result for', txid, status);\n              } else if (status.err) {\n                console.log('REST error for', txid, status);\n                done = true;\n                reject(status.err);\n              } else if (!status.confirmations) {\n                console.log('REST no confirmations for', txid, status);\n              } else {\n                console.log('REST confirmation for', txid, status);\n                done = true;\n                resolve(status);\n              }\n            }\n          } catch (e) {\n            if (!done) {\n              console.log('REST connection error: txid', txid, e);\n            }\n          }\n        })();\n        await sleep(2000);\n      }\n    });\n  \n    //@ts-ignore\n    if (connection._signatureSubscriptions[subId])\n      connection.removeSignatureListener(subId);\n    done = true;\n    console.log('Returning status', status);\n    return status;\n  }\n  export function sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n  ","import styled from 'styled-components';\nimport {useEffect, useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport {CircularProgress} from '@material-ui/core';\nimport {GatewayStatus, useGateway} from '@civic/solana-gateway-react';\nimport {CandyMachine} from './candy-machine';\n\n\nexport const CTAButton = styled(Button)`\n  display: block !important;\n  margin: 0 auto !important;\n  background-color: var(--title-text-color) !important;\n  min-width: 120px !important;\n  font-size: 1em !important;\n  color: var(--main-text-color);\n`;\n\nexport const MintButton = ({\n                               onMint,\n                               candyMachine,\n                               isMinting,\n                               isEnded,\n                               isActive,\n                               isSoldOut\n                           }: {\n    onMint: (quantityString: number) => Promise<void>;\n    candyMachine: CandyMachine | undefined;\n    isMinting: boolean;\n    isEnded: boolean;\n    isActive: boolean;\n    isSoldOut: boolean;\n}) => {\n    const {requestGatewayToken, gatewayStatus} = useGateway();\n    const [clicked, setClicked] = useState(false);\n    const [isVerifying, setIsVerifying] = useState(false);\n\n    useEffect(() => {\n        setIsVerifying(false);\n        if (gatewayStatus === GatewayStatus.COLLECTING_USER_INFORMATION && clicked) {\n            // when user approves wallet verification txn\n            setIsVerifying(true);\n        } else if (gatewayStatus === GatewayStatus.ACTIVE && clicked) {\n            console.log('Verified human, now minting...');\n            onMint(1);\n            setClicked(false);\n        }\n    }, [gatewayStatus, clicked, setClicked, onMint]);\n\n    return (\n        <CTAButton\n            disabled={\n                clicked ||\n                candyMachine?.state.isSoldOut ||\n                isSoldOut ||\n                isMinting ||\n                isEnded ||\n                !isActive ||\n                isVerifying\n            }\n            onClick={async () => {\n                if (isActive && candyMachine?.state.gatekeeper && gatewayStatus !== GatewayStatus.ACTIVE) {\n                    console.log('Requesting gateway token');\n                    setClicked(true);\n                    await requestGatewayToken();\n                } else {\n                    console.log('Minting...');\n                    await onMint(1);\n                }\n            }}\n            variant=\"contained\"\n        >\n            {!candyMachine ? (\n                \"CONNECTING...\"\n            ) : candyMachine?.state.isSoldOut || isSoldOut ? (\n                'SOLD OUT'\n            ) : isActive ? (\n                isVerifying ? 'VERIFYING...' :\n                    isMinting || clicked ? (\n                        <CircularProgress/>\n                    ) : (\n                        \"MINT\"\n                    )\n            ) : isEnded ? \"ENDED\" : (candyMachine?.state.goLiveDate ? (\n                \"SOON\"\n            ) : (\n                \"UNAVAILABLE\"\n            ))}\n        </CTAButton>\n    );\n};\n","import styled from 'styled-components';\nimport {useEffect, useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport {CircularProgress} from '@material-ui/core';\nimport {GatewayStatus, useGateway} from '@civic/solana-gateway-react';\nimport {CandyMachine} from './candy-machine';\n\n\nexport const CTAButton = styled(Button)`\n  display: inline-block !important;\n  margin: 0 auto !important;\n  background-color: var(--title-text-color) !important;\n  min-width: 120px !important;\n  font-size: 1em !important;\n`;\n\nexport const Minus = styled.button`\n  margin-left: 30px;\n  width: 40px;\n  height: 40px;\n  font-size: 1.3em;\n  font-weight: bold;\n  line-height: 0.5px;\n  color: var(--main-text-color);\n  background: var(--title-text-color);\n  box-shadow: 0px 3px 5px -1px rgb(0 0 0 / 20%), 0px 6px 10px 0px rgb(0 0 0 / 14%), 0px 1px 18px 0px rgb(0 0 0 / 12%);\n  border: 0;\n  border-radius: 50%;\n  box-sizing: border-box;\n  font-family: 'Orbitron', sans-serif;\n  vertical-align: middle;\n\n  :not(disabled) {\n    cursor: pointer;\n  }\n\n  :not(disabled):hover {\n    outline: 1px solid var(--title-text-color)\n  }\n`;\n\nexport const Plus = styled(Minus)`\n  margin-left: 0;\n`;\n\nexport const NumericField = styled.input`\n  font-size: 1.3em !important;\n  padding: 4px 4px 4px 16px;\n  width: 50px;\n  vertical-align: middle;\n  background-color: var(--main-text-color);\n  box-shadow: 0px 3px 5px -1px rgb(0 0 0 / 20%), 0px 6px 10px 0px rgb(0 0 0 / 14%), 0px 1px 18px 0px rgb(0 0 0 / 12%);\n  box-sizing: border-box;\n  font-family: 'Orbitron', sans-serif;\n  font-weight: 500;\n  line-height: 1;\n  border-radius: 8px;\n  transition: all 0.4s ease;\n  -moz-appearance: textfield;\n  -webkit-appearance: none;\n  margin: 0 10px;\n\n  :hover, :focus {\n    box-shadow: 0px 3px 5px -1px rgb(0 0 0 / 40%), 0px 6px 10px 0px rgb(0 0 0 / 34%), 0px 1px 18px 0px rgb(0 0 0 / 32%);\n  }\n\n  ::-webkit-outer-spin-button,\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n  }\n`;\n\n\nexport const MultiMintButton = ({\n                                    onMint,\n                                    candyMachine,\n                                    isMinting,\n                                    isEnded,\n                                    isActive,\n                                    isSoldOut,\n                                    price\n                                }: {\n    onMint: (quantityString: number) => Promise<void>;\n    candyMachine: CandyMachine | undefined;\n    isMinting: boolean;\n    isEnded: boolean;\n    isActive: boolean;\n    isSoldOut: boolean;\n    price: number;\n}) => {\n    const {requestGatewayToken, gatewayStatus} = useGateway();\n    const [clicked, setClicked] = useState(false);\n    const [isVerifying, setIsVerifying] = useState(false);\n    const [mintCount, setMintCount] = useState(1);\n    const [totalCost, setTotalCost] = useState(mintCount * (price + 0.012));\n\n    useEffect(() => {\n        setIsVerifying(false);\n        if (gatewayStatus === GatewayStatus.COLLECTING_USER_INFORMATION && clicked) {\n            // when user approves wallet verification txn\n            setIsVerifying(true);\n        } else if (gatewayStatus === GatewayStatus.ACTIVE && clicked) {\n            console.log('Verified human, now minting...');\n            onMint(mintCount);\n            setClicked(false);\n        }\n    }, [gatewayStatus, clicked, setClicked, mintCount, setMintCount, onMint]);\n\n    function incrementValue() {\n        var numericField = document.querySelector(\".mint-qty\") as HTMLInputElement;\n        if (numericField) {\n            var value = parseInt(numericField.value);\n            if (!isNaN(value) && value < 10) {\n                value++;\n                numericField.value = \"\" + value;\n                updateAmounts(value);\n            }\n        }\n    }\n\n    function decrementValue() {\n        var numericField = document.querySelector(\".mint-qty\") as HTMLInputElement;\n        if (numericField) {\n            var value = parseInt(numericField.value);\n            if (!isNaN(value) && value > 1) {\n                value--;\n                numericField.value = \"\" + value;\n                updateAmounts(value);\n            }\n        }\n    }\n\n    function updateMintCount(target: any) {\n        var value = parseInt(target.value);\n        if (!isNaN(value)) {\n            if (value > 10) {\n                value = 10;\n                target.value = \"\" + value;\n            } else if (value < 1) {\n                value = 1;\n                target.value = \"\" + value;\n            }\n            updateAmounts(value);\n        }\n    }\n\n    function updateAmounts(qty: number) {\n        setMintCount(qty);\n        setTotalCost(Math.round(qty * (price + 0.012) * 1000) / 1000);  // 0.012 = approx of account creation fees\n    }\n\n\n    return (\n        <div>\n            <div>\n                <CTAButton\n                    disabled={\n                        clicked ||\n                        candyMachine?.state.isSoldOut ||\n                        isSoldOut ||\n                        isMinting ||\n                        isEnded ||\n                        !isActive ||\n                        isVerifying\n                    }\n                    onClick={async () => {\n                        if (isActive && candyMachine?.state.gatekeeper && gatewayStatus !== GatewayStatus.ACTIVE) {\n                            console.log('Requesting gateway token');\n                            setClicked(true);\n                            await requestGatewayToken();\n                        } else {\n                            console.log('Minting...');\n                            await onMint(mintCount);\n                        }\n                    }}\n                    variant=\"contained\"\n                >\n                    {!candyMachine ? (\n                        \"CONNECTING...\"\n                    ) : candyMachine?.state.isSoldOut || isSoldOut ? (\n                        'SOLD OUT'\n                    ) : isActive ? (\n                        isVerifying ? 'VERIFYING...' :\n                            isMinting || clicked ? (\n                                <CircularProgress/>\n                            ) : (\n                                `MINT ${mintCount}`\n                            )\n                    ) : isEnded ? \"ENDED\" : (candyMachine?.state.goLiveDate ? (\n                        \"SOON\"\n                    ) : (\n                        \"UNAVAILABLE\"\n                    ))}\n                </CTAButton>\n                <Minus\n                    disabled={\n                        clicked ||\n                        candyMachine?.state.isSoldOut ||\n                        isSoldOut ||\n                        isMinting ||\n                        isEnded ||\n                        !isActive ||\n                        isVerifying\n                    }\n                    onClick={() => decrementValue()}\n                >-</Minus>\n                <NumericField\n                    disabled={\n                        clicked ||\n                        candyMachine?.state.isSoldOut ||\n                        isSoldOut ||\n                        isMinting ||\n                        isEnded ||\n                        !isActive ||\n                        isVerifying\n                    }\n                    type=\"number\"\n                    className=\"mint-qty\"\n                    step={1}\n                    min={1}\n                    max={10}\n                    value={mintCount}\n                    onChange={(e) => updateMintCount((e.target as any))}\n                />\n                <Plus\n                    disabled={\n                        clicked ||\n                        candyMachine?.state.isSoldOut ||\n                        isSoldOut ||\n                        isMinting ||\n                        isEnded ||\n                        !isActive ||\n                        isVerifying\n                    }\n                    onClick={() => incrementValue()}\n                >+</Plus>\n            </div>\n            {!candyMachine?.state.isSoldOut && !isSoldOut && isActive &&\n              <h3>Total estimated cost (Solana fees included) : {totalCost} SOL</h3>}\n        </div>\n    );\n};\n","import {useEffect, useState} from \"react\";\nimport styled from \"styled-components\";\nimport confetti from \"canvas-confetti\";\nimport * as anchor from \"@project-serum/anchor\";\nimport {LAMPORTS_PER_SOL, PublicKey} from \"@solana/web3.js\";\nimport {useAnchorWallet} from \"@solana/wallet-adapter-react\";\nimport {WalletMultiButton} from \"@solana/wallet-adapter-react-ui\";\nimport {GatewayProvider} from '@civic/solana-gateway-react';\nimport Countdown from \"react-countdown\";\nimport {Snackbar, Paper, LinearProgress, Chip} from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport {toDate, AlertState, getAtaForMint} from './utils';\nimport {MintButton} from './MintButton';\nimport {MultiMintButton} from './MultiMintButton';\nimport {\n    CandyMachine,\n    awaitTransactionSignatureConfirmation,\n    getCandyMachineState,\n    mintOneToken,\n    mintMultipleToken,\n    CANDY_MACHINE_PROGRAM,\n} from \"./candy-machine\";\n\nconst cluster = process.env.REACT_APP_SOLANA_NETWORK!.toString();\nconst decimals = process.env.REACT_APP_SPL_TOKEN_TO_MINT_DECIMALS ? +process.env.REACT_APP_SPL_TOKEN_TO_MINT_DECIMALS!.toString() : 9;\nconst splTokenName = process.env.REACT_APP_SPL_TOKEN_TO_MINT_NAME ? process.env.REACT_APP_SPL_TOKEN_TO_MINT_NAME.toString() : \"TOKEN\";\n\nconst WalletContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: right;\n`;\n\nconst WalletAmount = styled.div`\n  color: black;\n  width: auto;\n  padding: 5px 5px 5px 16px;\n  min-width: 48px;\n  min-height: auto;\n  border-radius: 22px;\n  background-color: var(--main-text-color);\n  box-shadow: 0px 3px 5px -1px rgb(0 0 0 / 20%), 0px 6px 10px 0px rgb(0 0 0 / 14%), 0px 1px 18px 0px rgb(0 0 0 / 12%);\n  box-sizing: border-box;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, border 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n  font-weight: 500;\n  line-height: 1.75;\n  text-transform: uppercase;\n  border: 0;\n  margin: 0;\n  display: inline-flex;\n  outline: 0;\n  position: relative;\n  align-items: center;\n  user-select: none;\n  vertical-align: middle;\n  justify-content: flex-start;\n  gap: 10px;\n`;\n\nconst Wallet = styled.ul`\n  flex: 0 0 auto;\n  margin: 0;\n  padding: 0;\n`;\n\nconst ConnectButton = styled(WalletMultiButton)`\n  border-radius: 18px !important;\n  padding: 6px 16px;\n  background-color: #4E44CE;\n  margin: 0 auto;\n  font-family: inherit;\n`;\n\nconst NFT = styled(Paper)`\n  min-width: 500px;\n  margin: 0 auto;\n  padding: 5px 20px 20px 20px;\n  flex: 1 1 auto;\n  background-color: var(--card-background-color) !important;\n  box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22) !important;\n`;\n\nconst Card = styled(Paper)`\n  display: inline-block;\n  background-color: var(--countdown-background-color) !important;\n  margin: 5px;\n  min-width: 40px;\n  padding: 24px;\n  h1{\n    margin:0px;\n  }\n`;\n\nconst MintButtonContainer = styled.div`\n  button.MuiButton-contained:not(.MuiButton-containedPrimary).Mui-disabled {\n    color: #464646;\n  }\n\n  button.MuiButton-contained:not(.MuiButton-containedPrimary):hover,\n  button.MuiButton-contained:not(.MuiButton-containedPrimary):focus {\n    -webkit-animation: pulse 1s;\n    animation: pulse 1s;\n    box-shadow: 0 0 0 2em rgba(255, 255, 255, 0);\n  }\n\n  @-webkit-keyframes pulse {\n    0% {\n      box-shadow: 0 0 0 0 #ef8f6e;\n    }\n  }\n\n  @keyframes pulse {\n    0% {\n      box-shadow: 0 0 0 0 #ef8f6e;\n    }\n  }\n`;\n\nconst SolExplorerLink = styled.a`\n  color: var(--title-text-color);\n  border-bottom: 1px solid var(--title-text-color);\n  font-weight: bold;\n  list-style-image: none;\n  list-style-position: outside;\n  list-style-type: none;\n  outline: none;\n  text-decoration: none;\n  text-size-adjust: 100%;\n\n  :hover {\n    border-bottom: 2px solid var(--title-text-color);\n  }\n`;\n\nconst MainContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  margin-right: 4%;\n  margin-left: 4%;\n  text-align: center;\n  justify-content: center;\n`;\n\nconst MintContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex: 1 1 auto;\n  flex-wrap: wrap;\n  gap: 20px;\n`;\n\nconst DesContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1 1 auto;\n  gap: 20px;\n`;\n\nconst Price = styled(Chip)`\n  position: absolute;\n  margin: 5px;\n  font-weight: bold;\n  font-size: 1.2em !important;\n  font-family: 'Orbitron', sans-serif !important;\n`;\n\nconst Image = styled.img`\n  height: 400px;\n  width: auto;\n  border-radius: 10px;\n  box-shadow: 5px 5px 40px 5px rgba(0,0,0,0.5);\n`;\n\nconst BorderLinearProgress = styled(LinearProgress)`\n  margin: 20px;\n  height: 10px !important;\n  border-radius: 30px;\n  border: 2px solid white;\n  box-shadow: 5px 5px 40px 5px rgba(0,0,0,0.5);\n  background-color:var(--main-text-color) !important;\n  \n  > div.MuiLinearProgress-barColorPrimary{\n    background-color:var(--title-text-color) !important;\n  }\n\n  > div.MuiLinearProgress-bar1Determinate {\n    border-radius: 30px !important;\n    background-image: linear-gradient(270deg, rgba(255, 255, 255, 0.01), rgba(255, 255, 255, 0.5));\n  }\n`;\n\nexport interface HomeProps {\n    candyMachineId: anchor.web3.PublicKey;\n    connection: anchor.web3.Connection;\n    txTimeout: number;\n    rpcHost: string;\n}\n\nconst Home = (props: HomeProps) => {\n    const [balance, setBalance] = useState<number>();\n    const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n    const [isActive, setIsActive] = useState(false); // true when countdown completes or whitelisted\n    const [solanaExplorerLink, setSolanaExplorerLink] = useState<string>(\"\");\n    const [itemsAvailable, setItemsAvailable] = useState(0);\n    const [itemsRedeemed, setItemsRedeemed] = useState(0);\n    const [itemsRemaining, setItemsRemaining] = useState(0);\n    const [isSoldOut, setIsSoldOut] = useState(false);\n    const [payWithSplToken, setPayWithSplToken] = useState(false);\n    const [price, setPrice] = useState(0);\n    const [priceLabel, setPriceLabel] = useState<string>(\"SOL\");\n    const [whitelistPrice, setWhitelistPrice] = useState(0);\n    const [whitelistEnabled, setWhitelistEnabled] = useState(false);\n    const [isBurnToken, setIsBurnToken] = useState(false);\n    const [whitelistTokenBalance, setWhitelistTokenBalance] = useState(0);\n    const [isEnded, setIsEnded] = useState(false);\n    const [endDate, setEndDate] = useState<Date>();\n    const [isPresale, setIsPresale] = useState(false);\n    const [isWLOnly, setIsWLOnly] = useState(false);\n\n    const [alertState, setAlertState] = useState<AlertState>({\n        open: false,\n        message: \"\",\n        severity: undefined,\n    });\n\n    const wallet = useAnchorWallet();\n    const [candyMachine, setCandyMachine] = useState<CandyMachine>();\n\n    const rpcUrl = props.rpcHost;\n    const solFeesEstimation = 0.012; // approx of account creation fees\n\n    const refreshCandyMachineState = () => {\n        (async () => {\n            if (!wallet) return;\n\n            const cndy = await getCandyMachineState(\n                wallet as anchor.Wallet,\n                props.candyMachineId,\n                props.connection\n            );\n\n            setCandyMachine(cndy);\n            setItemsAvailable(cndy.state.itemsAvailable);\n            setItemsRemaining(cndy.state.itemsRemaining);\n            setItemsRedeemed(cndy.state.itemsRedeemed);\n\n            var divider = 1;\n            if (decimals) {\n                divider = +('1' + new Array(decimals).join('0').slice() + '0');\n            }\n\n            // detect if using spl-token to mint\n            if (cndy.state.tokenMint) {\n                setPayWithSplToken(true);\n                // Customize your SPL-TOKEN Label HERE\n                // TODO: get spl-token metadata name\n                setPriceLabel(splTokenName);\n                setPrice(cndy.state.price.toNumber() / divider);\n                setWhitelistPrice(cndy.state.price.toNumber() / divider);\n            } else {\n                setPrice(cndy.state.price.toNumber() / LAMPORTS_PER_SOL);\n                setWhitelistPrice(cndy.state.price.toNumber() / LAMPORTS_PER_SOL);\n            }\n\n\n            // fetch whitelist token balance\n            if (cndy.state.whitelistMintSettings) {\n                setWhitelistEnabled(true);\n                setIsBurnToken(cndy.state.whitelistMintSettings.mode.burnEveryTime);\n                setIsPresale(cndy.state.whitelistMintSettings.presale);\n                setIsWLOnly(!isPresale && cndy.state.whitelistMintSettings.discountPrice === null);\n\n                if (cndy.state.whitelistMintSettings.discountPrice !== null && cndy.state.whitelistMintSettings.discountPrice !== cndy.state.price) {\n                    if (cndy.state.tokenMint) {\n                        setWhitelistPrice(cndy.state.whitelistMintSettings.discountPrice?.toNumber() / divider);\n                    } else {\n                        setWhitelistPrice(cndy.state.whitelistMintSettings.discountPrice?.toNumber() / LAMPORTS_PER_SOL);\n                    }\n                }\n\n                let balance = 0;\n                try {\n                    const tokenBalance =\n                        await props.connection.getTokenAccountBalance(\n                            (\n                                await getAtaForMint(\n                                    cndy.state.whitelistMintSettings.mint,\n                                    wallet.publicKey,\n                                )\n                            )[0],\n                        );\n\n                    balance = tokenBalance?.value?.uiAmount || 0;\n                } catch (e) {\n                    console.error(e);\n                    balance = 0;\n                }\n                setWhitelistTokenBalance(balance);\n                setIsActive(isPresale && !isEnded && balance > 0);\n            } else {\n                setWhitelistEnabled(false);\n            }\n\n            // end the mint when date is reached\n            if (cndy?.state.endSettings?.endSettingType.date) {\n                setEndDate(toDate(cndy.state.endSettings.number));\n                if (\n                    cndy.state.endSettings.number.toNumber() <\n                    new Date().getTime() / 1000\n                ) {\n                    setIsEnded(true);\n                    setIsActive(false);\n                }\n            }\n            // end the mint when amount is reached\n            if (cndy?.state.endSettings?.endSettingType.amount) {\n                let limit = Math.min(\n                    cndy.state.endSettings.number.toNumber(),\n                    cndy.state.itemsAvailable,\n                );\n                setItemsAvailable(limit);\n                if (cndy.state.itemsRedeemed < limit) {\n                    setItemsRemaining(limit - cndy.state.itemsRedeemed);\n                } else {\n                    setItemsRemaining(0);\n                    cndy.state.isSoldOut = true;\n                    setIsEnded(true);\n                }\n            } else {\n                setItemsRemaining(cndy.state.itemsRemaining);\n            }\n\n            if (cndy.state.isSoldOut) {\n                setIsActive(false);\n            }\n        })();\n    };\n\n    const renderGoLiveDateCounter = ({days, hours, minutes, seconds}: any) => {\n        return (\n            <div><Card elevation={1}><h1>{days}</h1>Days</Card><Card elevation={1}><h1>{hours}</h1>\n                Hours</Card><Card elevation={1}><h1>{minutes}</h1>Mins</Card><Card elevation={1}>\n                <h1>{seconds}</h1>Secs</Card></div>\n        );\n    };\n\n    const renderEndDateCounter = ({days, hours, minutes}: any) => {\n        let label = \"\";\n        if (days > 0) {\n            label += days + \" days \"\n        }\n        if (hours > 0) {\n            label += hours + \" hours \"\n        }\n        label += (minutes+1) + \" minutes left to MINT.\"\n        return (\n            <div><h3>{label}</h3></div>\n        );\n    };\n\n    function displaySuccess(mintPublicKey: any, qty: number = 1): void {\n        let remaining = itemsRemaining - qty;\n        setItemsRemaining(remaining);\n        setIsSoldOut(remaining === 0);\n        if (isBurnToken && whitelistTokenBalance && whitelistTokenBalance > 0) {\n            let balance = whitelistTokenBalance - qty;\n            setWhitelistTokenBalance(balance);\n            setIsActive(isPresale && !isEnded && balance > 0);\n        }\n        setItemsRedeemed(itemsRedeemed + qty);\n        if (!payWithSplToken && balance && balance > 0) {\n            setBalance(balance - ((whitelistEnabled ? whitelistPrice : price) * qty) - solFeesEstimation);\n        }\n        setSolanaExplorerLink(cluster === \"devnet\" || cluster === \"testnet\"\n            ? (\"https://solscan.io/token/\" + mintPublicKey + \"?cluster=\" + cluster)\n            : (\"https://solscan.io/token/\" + mintPublicKey));\n        throwConfetti();\n    };\n\n    function throwConfetti(): void {\n        confetti({\n            particleCount: 500,\n            spread: 100,\n            origin: {y: 0.6},\n        });\n    }\n\n    function sleep(ms: number): Promise<void> {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    async function mintMany(quantityString: number) {\n        if (wallet && candyMachine?.program && wallet.publicKey) {\n            const quantity = Number(quantityString);\n            const futureBalance = (balance || 0) - ((whitelistEnabled ? whitelistPrice : price) * quantity);\n            const signedTransactions: any = await mintMultipleToken(\n                candyMachine,\n                wallet.publicKey,\n                quantity\n            );\n\n            const promiseArray = [];\n\n            for (\n                let index = 0;\n                index < signedTransactions.length;\n                index++\n            ) {\n                const tx = signedTransactions[index];\n                promiseArray.push(\n                    awaitTransactionSignatureConfirmation(\n                        tx,\n                        props.txTimeout,\n                        props.connection,\n                        \"singleGossip\",\n                        true\n                    )\n                );\n            }\n\n            const allTransactionsResult = await Promise.all(promiseArray);\n            let totalSuccess = 0;\n            let totalFailure = 0;\n\n            for (\n                let index = 0;\n                index < allTransactionsResult.length;\n                index++\n            ) {\n                const transactionStatus = allTransactionsResult[index];\n                if (!transactionStatus?.err) {\n                    totalSuccess += 1;\n                } else {\n                    totalFailure += 1;\n                }\n            }\n\n            let retry = 0;\n            if (allTransactionsResult.length > 0) {\n                let newBalance =\n                    (await props.connection.getBalance(wallet.publicKey)) /\n                    LAMPORTS_PER_SOL;\n\n\n                while (newBalance > futureBalance && retry < 20) {\n                    await sleep(2000);\n                    newBalance =\n                        (await props.connection.getBalance(wallet.publicKey)) /\n                        LAMPORTS_PER_SOL;\n                    retry++;\n                    console.log(\"Estimated balance (\" + futureBalance + \") not correct yet, wait a little bit and re-check. Current balance : \" + newBalance + \", Retry \" + retry);\n                }\n            }\n\n            if (totalSuccess && retry < 20) {\n                setAlertState({\n                    open: true,\n                    message: `Congratulations! Your ${quantity} mints succeeded!`,\n                    severity: 'success',\n                });\n\n                // update front-end amounts\n                displaySuccess(wallet.publicKey, quantity);\n            }\n\n            if (totalFailure || retry === 20) {\n                setAlertState({\n                    open: true,\n                    message: `Some mints failed! (possibly ${totalFailure}) Wait a few minutes and check your wallet.`,\n                    severity: 'error',\n                });\n            }\n\n            if (totalFailure === 0 && totalSuccess === 0) {\n                setAlertState({\n                    open: true,\n                    message: `Mints manually cancelled.`,\n                    severity: 'error',\n                });\n            }\n        }\n    }\n\n    async function mintOne() {\n        if (wallet && candyMachine?.program && wallet.publicKey) {\n            const mint = anchor.web3.Keypair.generate();\n            const mintTxId = (\n                await mintOneToken(candyMachine, wallet.publicKey, mint)\n            )[0];\n\n            let status: any = {err: true};\n            if (mintTxId) {\n                status = await awaitTransactionSignatureConfirmation(\n                    mintTxId,\n                    props.txTimeout,\n                    props.connection,\n                    'singleGossip',\n                    true,\n                );\n            }\n\n            if (!status?.err) {\n                setAlertState({\n                    open: true,\n                    message: 'Congratulations! Mint succeeded!',\n                    severity: 'success',\n                });\n\n                // update front-end amounts\n                displaySuccess(mint.publicKey);\n            } else {\n                setAlertState({\n                    open: true,\n                    message: 'Mint failed! Please try again!',\n                    severity: 'error',\n                });\n            }\n        }\n    }\n\n    const startMint = async (quantityString: number) => {\n        try {\n            setIsMinting(true);\n            if (quantityString === 1) {\n                await mintOne();\n            } else {\n                await mintMany(quantityString);\n            }\n        } catch (error: any) {\n            let message = error.msg || 'Minting failed! Please try again!';\n            if (!error.msg) {\n                if (!error.message) {\n                    message = 'Transaction Timeout! Please try again.';\n                } else if (error.message.indexOf('0x138')) {\n                } else if (error.message.indexOf('0x137')) {\n                    message = `SOLD OUT!`;\n                } else if (error.message.indexOf('0x135')) {\n                    message = `Insufficient funds to mint. Please fund your wallet.`;\n                }\n            } else {\n                if (error.code === 311) {\n                    message = `SOLD OUT!`;\n                } else if (error.code === 312) {\n                    message = `Minting period hasn't started yet.`;\n                }\n            }\n\n            setAlertState({\n                open: true,\n                message,\n                severity: \"error\",\n            });\n        } finally {\n            setIsMinting(false);\n        }\n    };\n\n    useEffect(() => {\n        (async () => {\n            if (wallet) {\n                const balance = await props.connection.getBalance(wallet.publicKey);\n                setBalance(balance / LAMPORTS_PER_SOL);\n            }\n        })();\n    }, [wallet, props.connection]);\n\n    useEffect(refreshCandyMachineState, [\n        wallet,\n        props.candyMachineId,\n        props.connection,\n        isEnded,\n        isPresale\n    ]);\n\n    return (\n        <main className=\"body-wrap\">\n            <MainContainer className=\"mainContainer\">\n                <WalletContainer>\n                    <Wallet>\n                        {wallet ?\n                            <WalletAmount>{(balance || 0).toLocaleString()} SOL<ConnectButton/></WalletAmount> :\n                            <ConnectButton>Connect Wallet</ConnectButton>}\n                    </Wallet>\n                </WalletContainer>\n                <br/>\n                <MintContainer>\n                    <DesContainer>\n                        <NFT elevation={3}>\n                            <h2>Mint Some Martians</h2>\n                            <br/>\n                            <div><Price\n                                label={isActive && whitelistEnabled && (whitelistTokenBalance > 0) ? (whitelistPrice + \" \" + priceLabel) : (price + \" \" + priceLabel)}/><Image\n                                src=\"./martians.gif\"\n                                alt=\"NFT To Mint\"/></div>\n                            <br/>\n                            {wallet && isActive && whitelistEnabled && (whitelistTokenBalance > 0) && isBurnToken &&\n                              <h3>You own {whitelistTokenBalance} WL mint {whitelistTokenBalance > 1 ? \"tokens\" : \"token\" }.</h3>}\n                            {wallet && isActive && whitelistEnabled && (whitelistTokenBalance > 0) && !isBurnToken &&\n                              <h3>You are whitelisted and allowed to mint.</h3>}\n                            {wallet && isActive && endDate && Date.now() < endDate.getTime() &&\n                              <Countdown\n                                date={toDate(candyMachine?.state?.endSettings?.number)}\n                                onMount={({completed}) => completed && setIsEnded(true)}\n                                onComplete={() => {\n                                    setIsEnded(true);\n                                }}\n                                renderer={renderEndDateCounter}\n                              />}\n                            {wallet && isActive &&\n                              <h3>TOTAL MINTED : {itemsRedeemed} / {itemsAvailable}</h3>}\n                            {wallet && isActive && <BorderLinearProgress variant=\"determinate\"\n                                                                         value={100 - (itemsRemaining * 100 / itemsAvailable)}/>}\n                            <br/>\n                            <MintButtonContainer>\n                                {!isActive && !isEnded && candyMachine?.state.goLiveDate && (!isWLOnly || whitelistTokenBalance > 0) ? (\n                                    <Countdown\n                                        date={toDate(candyMachine?.state.goLiveDate)}\n                                        onMount={({completed}) => completed && setIsActive(!isEnded)}\n                                        onComplete={() => {\n                                            setIsActive(!isEnded);\n                                        }}\n                                        renderer={renderGoLiveDateCounter}\n                                    />) : (\n                                    !wallet ? (\n                                            <ConnectButton>Connect Wallet</ConnectButton>\n                                        ) : (!isWLOnly || whitelistTokenBalance > 0) ?\n                                        candyMachine?.state.gatekeeper &&\n                                        wallet.publicKey &&\n                                        wallet.signTransaction ? (\n                                            <GatewayProvider\n                                                wallet={{\n                                                    publicKey:\n                                                        wallet.publicKey ||\n                                                        new PublicKey(CANDY_MACHINE_PROGRAM),\n                                                    //@ts-ignore\n                                                    signTransaction: wallet.signTransaction,\n                                                }}\n                                                // // Replace with following when added\n                                                // gatekeeperNetwork={candyMachine.state.gatekeeper_network}\n                                                gatekeeperNetwork={\n                                                    candyMachine?.state?.gatekeeper?.gatekeeperNetwork\n                                                } // This is the ignite (captcha) network\n                                                /// Don't need this for mainnet\n                                                clusterUrl={rpcUrl}\n                                                options={{autoShowModal: false}}\n                                            >\n                                                <MintButton\n                                                    candyMachine={candyMachine}\n                                                    isMinting={isMinting}\n                                                    isActive={isActive}\n                                                    isEnded={isEnded}\n                                                    isSoldOut={isSoldOut}\n                                                    onMint={startMint}\n                                                />\n                                            </GatewayProvider>\n                                        ) : (\n                                            /*<MintButton\n                                                candyMachine={candyMachine}\n                                                isMinting={isMinting}\n                                                isActive={isActive}\n                                                isEnded={isEnded}\n                                                isSoldOut={isSoldOut}\n                                                onMint={startMint}\n                                            />*/\n                                            <MultiMintButton\n                                                candyMachine={candyMachine}\n                                                isMinting={isMinting}\n                                                isActive={isActive}\n                                                isEnded={isEnded}\n                                                isSoldOut={isSoldOut}\n                                                onMint={startMint}\n                                                price={whitelistEnabled ? whitelistPrice : price}\n                                            />\n                                        ) :\n                                        <h1>Mint is private.</h1>\n                                        )}\n                            </MintButtonContainer>\n                            <br/>\n                            {wallet && isActive && solanaExplorerLink &&\n                              <SolExplorerLink href={solanaExplorerLink} target=\"_blank\">View on Solscan</SolExplorerLink>}\n                        </NFT>\n                    </DesContainer>\n                </MintContainer>\n            </MainContainer>\n            <Snackbar\n                open={alertState.open}\n                autoHideDuration={6000}\n                onClose={() => setAlertState({...alertState, open: false})}\n            >\n                <Alert\n                    onClose={() => setAlertState({...alertState, open: false})}\n                    severity={alertState.severity}\n                >\n                    {alertState.message}\n                </Alert>\n            </Snackbar>\n        </main>\n    );\n};\n\nexport default Home;\n","import { createTheme, ThemeProvider } from \"@material-ui/core\";\nimport { useMemo } from \"react\";\nimport {\n    ConnectionProvider,\n    WalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n    getPhantomWallet,\n    getSlopeWallet,\n    getSolflareWallet,\n    getSolflareWebWallet,\n    getSolletWallet,\n    getSolletExtensionWallet,\n    getSolongWallet,\n    getLedgerWallet,\n    getSafePalWallet,\n} from \"@solana/wallet-adapter-wallets\";\n\nimport {\n    WalletModalProvider\n} from '@solana/wallet-adapter-react-ui';\n\nimport \"./App.css\";\nimport Home from \"./Home\";\n\nrequire('@solana/wallet-adapter-react-ui/styles.css');\n\n\nconst candyMachineId = new anchor.web3.PublicKey(\n  process.env.REACT_APP_CANDY_MACHINE_ID!\n);\n\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\n\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\nconst connection = new anchor.web3.Connection(rpcHost);\n\nconst txTimeout = 30000; // milliseconds (confirm this works for your project)\n\nconst theme = createTheme({\n    palette: {\n        type: 'dark',\n    },\n    overrides: {\n        MuiButtonBase: {\n            root: {\n                justifyContent: 'flex-start',\n            },\n        },\n        MuiButton: {\n            root: {\n                textTransform: undefined,\n                padding: '12px 16px',\n            },\n            startIcon: {\n                marginRight: 8,\n            },\n            endIcon: {\n                marginLeft: 8,\n            },\n        },\n    },\n});\n\nconst App = () => {\n    // Custom RPC endpoint.\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n    // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking and lazy loading --\n    // Only the wallets you configure here will be compiled into your application, and only the dependencies\n    // of wallets that your users connect to will be loaded.\n    const wallets = useMemo(\n        () => [\n            getPhantomWallet(),\n            getSlopeWallet(),\n            getSolflareWallet(),\n            getSolflareWebWallet(),\n            getSolletWallet({ network }),\n            getSolletExtensionWallet({ network }),\n            getSolongWallet(),\n            getLedgerWallet(),\n            getSafePalWallet(),\n        ],\n        []\n    );\n\n  return (\n      <ThemeProvider theme={theme}>\n        <ConnectionProvider endpoint={endpoint}>\n          <WalletProvider wallets={wallets} autoConnect={true}>\n            <WalletModalProvider>\n              <Home\n                candyMachineId={candyMachineId}\n                connection={connection}\n                txTimeout={txTimeout}\n                rpcHost={rpcHost}\n              />\n            </WalletModalProvider>\n          </WalletProvider>\n        </ConnectionProvider>\n      </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import * as anchor from '@project-serum/anchor';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { SystemProgram } from '@solana/web3.js';\nimport {\n  LAMPORTS_PER_SOL,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from '@solana/web3.js';\n\nexport interface AlertState {\n  open: boolean;\n  message: string;\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined;\n}\n\nexport const toDate = (value?: anchor.BN) => {\n  if (!value) {\n    return;\n  }\n\n  return new Date(value.toNumber() * 1000);\n};\n\nconst numberFormater = new Intl.NumberFormat('en-US', {\n  style: 'decimal',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatNumber = {\n  format: (val?: number) => {\n    if (!val) {\n      return '--';\n    }\n\n    return numberFormater.format(val);\n  },\n  asNumber: (val?: anchor.BN) => {\n    if (!val) {\n      return undefined;\n    }\n\n    return val.toNumber() / LAMPORTS_PER_SOL;\n  },\n};\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\n  new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n\nexport const CIVIC = new anchor.web3.PublicKey(\n  'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\n);\n\nexport const getAtaForMint = async (\n  mint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  );\n};\n\nexport const getNetworkExpire = async (\n  gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\n    CIVIC,\n  );\n};\n\nexport const getNetworkToken = async (\n  wallet: anchor.web3.PublicKey,\n  gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      wallet.toBuffer(),\n      Buffer.from('gateway'),\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\n      gatekeeperNetwork.toBuffer(),\n    ],\n    CIVIC,\n  );\n};\n\nexport function createAssociatedTokenAccountInstruction(\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n","import * as anchor from \"@project-serum/anchor\";\n\nimport {\n  MintLayout,\n  TOKEN_PROGRAM_ID,\n  Token,\n} from \"@solana/spl-token\";\n\nimport { SystemProgram } from '@solana/web3.js';\nimport { sendTransactions } from './connection';\n\nimport {\n  CIVIC,\n  getAtaForMint,\n  getNetworkExpire,\n  getNetworkToken,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n} from './utils';\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  \"cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ\"\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\n\nexport interface CandyMachine {\n  id: anchor.web3.PublicKey,\n  program: anchor.Program;\n  state: CandyMachineState;\n}\n\ninterface CandyMachineState {\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  treasury: anchor.web3.PublicKey;\n  tokenMint: anchor.web3.PublicKey;\n  isSoldOut: boolean;\n  isActive: boolean;\n  goLiveDate: anchor.BN;\n  price: anchor.BN;\n  gatekeeper: null | {\n    expireOnUse: boolean;\n    gatekeeperNetwork: anchor.web3.PublicKey;\n  };\n  endSettings: null | {\n    number: anchor.BN;\n    endSettingType: any;\n  };\n  whitelistMintSettings: null | {\n    mode: any;\n    mint: anchor.web3.PublicKey;\n    presale: boolean;\n    discountPrice: null | anchor.BN;\n  };\n  hiddenSettings: null | {\n    name: string;\n    uri: string;\n    hash: Uint8Array;\n  };\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  commitment: anchor.web3.Commitment = 'recent',\n  queryStatus = false,\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n  done = true;\n  console.log('Returning status', status);\n  return status;\n};\n\n/* export */ const createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection,\n): Promise<CandyMachine> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: 'recent',\n  });\n\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n\n  const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM, provider);\n\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n\n  return {\n    id: candyMachineId,\n    program,\n    state: {\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      isSoldOut: itemsRemaining === 0,\n      isActive:\n        state.data.goLiveDate &&\n        state.data.goLiveDate.toNumber() < new Date().getTime() / 1000 &&\n        (state.endSettings\n          ? state.endSettings.endSettingType.date\n            ? state.endSettings.number.toNumber() > new Date().getTime() / 1000\n            : itemsRedeemed < state.endSettings.number.toNumber()\n          : true),\n      goLiveDate: state.data.goLiveDate,\n      treasury: state.wallet,\n      tokenMint: state.tokenMint,\n      gatekeeper: state.data.gatekeeper,\n      endSettings: state.data.endSettings,\n      whitelistMintSettings: state.data.whitelistMintSettings,\n      hiddenSettings: state.data.hiddenSettings,\n      price: state.data.price,\n    },\n  };\n};\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('edition'),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getCandyMachineCreator = async (\n  candyMachine: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('candy_machine'), candyMachine.toBuffer()],\n    CANDY_MACHINE_PROGRAM,\n  );\n};\n\nexport const mintMultipleToken = async (\n    candyMachine: CandyMachine,\n    payer: anchor.web3.PublicKey,\n    quantity: number = 2\n): Promise<(string | undefined)[]> => {\n  const signersMatrix = [];\n  const instructionsMatrix = [];\n\n  for (let index = 0; index < quantity; index++) {\n      const mint = anchor.web3.Keypair.generate();\n      const userTokenAccountAddress = (\n          await getAtaForMint(mint.publicKey, payer)\n      )[0];\n\n      const userPayingAccountAddress = candyMachine.state.tokenMint\n          ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\n          : payer;\n\n      const candyMachineAddress = candyMachine.id;\n      const remainingAccounts = [];\n      const signers: anchor.web3.Keypair[] = [mint];\n      const cleanupInstructions = [];\n      const instructions = [\n          anchor.web3.SystemProgram.createAccount({\n              fromPubkey: payer,\n              newAccountPubkey: mint.publicKey,\n              space: MintLayout.span,\n              lamports:\n                  await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n                      MintLayout.span,\n                  ),\n              programId: TOKEN_PROGRAM_ID,\n          }),\n          Token.createInitMintInstruction(\n              TOKEN_PROGRAM_ID,\n              mint.publicKey,\n              0,\n              payer,\n              payer,\n          ),\n          createAssociatedTokenAccountInstruction(\n              userTokenAccountAddress,\n              payer,\n              payer,\n              mint.publicKey,\n          ),\n          Token.createMintToInstruction(\n              TOKEN_PROGRAM_ID,\n              mint.publicKey,\n              userTokenAccountAddress,\n              payer,\n              [],\n              1,\n          ),\n      ];\n\n      // CIVIC\n      if (candyMachine.state.gatekeeper) {\n          remainingAccounts.push({\n              pubkey: (\n                  await getNetworkToken(\n                      payer,\n                      candyMachine.state.gatekeeper.gatekeeperNetwork,\n                  )\n              )[0],\n              isWritable: true,\n              isSigner: false,\n          });\n          if (candyMachine.state.gatekeeper.expireOnUse) {\n              remainingAccounts.push({\n                  pubkey: CIVIC,\n                  isWritable: false,\n                  isSigner: false,\n              });\n              remainingAccounts.push({\n                  pubkey: (\n                      await getNetworkExpire(\n                          candyMachine.state.gatekeeper.gatekeeperNetwork,\n                      )\n                  )[0],\n                  isWritable: false,\n                  isSigner: false,\n              });\n          }\n      }\n\n      // WHITELIST/PRE-SALE\n      if (candyMachine.state.whitelistMintSettings) {\n          const mint = new anchor.web3.PublicKey(\n              candyMachine.state.whitelistMintSettings.mint,\n          );\n\n          const whitelistToken = (await getAtaForMint(mint, payer))[0];\n          remainingAccounts.push({\n              pubkey: whitelistToken,\n              isWritable: true,\n              isSigner: false,\n          });\n\n          if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n              const whitelistBurnAuthority = anchor.web3.Keypair.generate();\n\n              remainingAccounts.push({\n                  pubkey: mint,\n                  isWritable: true,\n                  isSigner: false,\n              });\n              remainingAccounts.push({\n                  pubkey: whitelistBurnAuthority.publicKey,\n                  isWritable: false,\n                  isSigner: true,\n              });\n              signers.push(whitelistBurnAuthority);\n              const exists =\n                  await candyMachine.program.provider.connection.getAccountInfo(\n                      whitelistToken,\n                  );\n              if (exists) {\n                  instructions.push(\n                      Token.createApproveInstruction(\n                          TOKEN_PROGRAM_ID,\n                          whitelistToken,\n                          whitelistBurnAuthority.publicKey,\n                          payer,\n                          [],\n                          1,\n                      ),\n                  );\n                  cleanupInstructions.push(\n                      Token.createRevokeInstruction(\n                          TOKEN_PROGRAM_ID,\n                          whitelistToken,\n                          payer,\n                          [],\n                      ),\n                  );\n              }\n          }\n      }\n\n      // SPL-TOKEN TO MINT\n      if (candyMachine.state.tokenMint) {\n          const transferAuthority = anchor.web3.Keypair.generate();\n\n          signers.push(transferAuthority);\n          remainingAccounts.push({\n              pubkey: userPayingAccountAddress,\n              isWritable: true,\n              isSigner: false,\n          });\n          remainingAccounts.push({\n              pubkey: transferAuthority.publicKey,\n              isWritable: false,\n              isSigner: true,\n          });\n\n          instructions.push(\n              Token.createApproveInstruction(\n                  TOKEN_PROGRAM_ID,\n                  userPayingAccountAddress,\n                  transferAuthority.publicKey,\n                  payer,\n                  [],\n                  candyMachine.state.price.toNumber(),\n              ),\n          );\n          cleanupInstructions.push(\n              Token.createRevokeInstruction(\n                  TOKEN_PROGRAM_ID,\n                  userPayingAccountAddress,\n                  payer,\n                  [],\n              ),\n          );\n      }\n      const metadataAddress = await getMetadata(mint.publicKey);\n      const masterEdition = await getMasterEdition(mint.publicKey);\n\n      const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\n          candyMachineAddress,\n      );\n\n      instructions.push(\n          await candyMachine.program.instruction.mintNft(creatorBump, {\n              accounts: {\n                  candyMachine: candyMachineAddress,\n                  candyMachineCreator,\n                  payer: payer,\n                  wallet: candyMachine.state.treasury,\n                  mint: mint.publicKey,\n                  metadata: metadataAddress,\n                  masterEdition,\n                  mintAuthority: payer,\n                  updateAuthority: payer,\n                  tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n                  tokenProgram: TOKEN_PROGRAM_ID,\n                  systemProgram: SystemProgram.programId,\n                  rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n                  clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n                  recentBlockhashes: anchor.web3.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n                  instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n              },\n              remainingAccounts:\n                  remainingAccounts.length > 0 ? remainingAccounts : undefined,\n          }),\n      );\n\n      signersMatrix.push(signers);\n      instructionsMatrix.push(instructions);\n      if (cleanupInstructions.length > 0) {\n          instructionsMatrix.push(cleanupInstructions);\n          signersMatrix.push([]);\n      }\n\n  }\n\n  try {\n    return (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        instructionsMatrix,\n        signersMatrix\n      )\n    ).txs.map(t => t.txid);\n  } catch (e) {\n    console.log(e);\n  }\n\n  return [];\n};\n\nexport const mintOneToken = async (\n    candyMachine: CandyMachine,\n    payer: anchor.web3.PublicKey,\n    mint: anchor.web3.Keypair\n): Promise<(string | undefined)[]> => {\n  const userTokenAccountAddress = (\n      await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const userPayingAccountAddress = candyMachine.state.tokenMint\n      ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\n      : payer;\n\n  const candyMachineAddress = candyMachine.id;\n  const remainingAccounts = [];\n  const signers: anchor.web3.Keypair[] = [mint];\n  const cleanupInstructions = [];\n  const instructions = [\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports:\n          await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n              MintLayout.span,\n          ),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    Token.createInitMintInstruction(\n        TOKEN_PROGRAM_ID,\n        mint.publicKey,\n        0,\n        payer,\n        payer,\n    ),\n    createAssociatedTokenAccountInstruction(\n        userTokenAccountAddress,\n        payer,\n        payer,\n        mint.publicKey,\n    ),\n    Token.createMintToInstruction(\n        TOKEN_PROGRAM_ID,\n        mint.publicKey,\n        userTokenAccountAddress,\n        payer,\n        [],\n        1,\n    ),\n  ];\n\n  if (candyMachine.state.gatekeeper) {\n    remainingAccounts.push({\n      pubkey: (\n          await getNetworkToken(\n              payer,\n              candyMachine.state.gatekeeper.gatekeeperNetwork,\n          )\n      )[0],\n      isWritable: true,\n      isSigner: false,\n    });\n    if (candyMachine.state.gatekeeper.expireOnUse) {\n      remainingAccounts.push({\n        pubkey: CIVIC,\n        isWritable: false,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: (\n            await getNetworkExpire(\n                candyMachine.state.gatekeeper.gatekeeperNetwork,\n            )\n        )[0],\n        isWritable: false,\n        isSigner: false,\n      });\n    }\n  }\n  if (candyMachine.state.whitelistMintSettings) {\n    const mint = new anchor.web3.PublicKey(\n        candyMachine.state.whitelistMintSettings.mint,\n    );\n\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\n    remainingAccounts.push({\n      pubkey: whitelistToken,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n      const whitelistBurnAuthority = anchor.web3.Keypair.generate();\n\n      remainingAccounts.push({\n        pubkey: mint,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: whitelistBurnAuthority.publicKey,\n        isWritable: false,\n        isSigner: true,\n      });\n      signers.push(whitelistBurnAuthority);\n      const exists =\n          await candyMachine.program.provider.connection.getAccountInfo(\n              whitelistToken,\n          );\n      if (exists) {\n        instructions.push(\n            Token.createApproveInstruction(\n                TOKEN_PROGRAM_ID,\n                whitelistToken,\n                whitelistBurnAuthority.publicKey,\n                payer,\n                [],\n                1,\n            ),\n        );\n        cleanupInstructions.push(\n            Token.createRevokeInstruction(\n                TOKEN_PROGRAM_ID,\n                whitelistToken,\n                payer,\n                [],\n            ),\n        );\n      }\n    }\n  }\n\n  if (candyMachine.state.tokenMint) {\n    const transferAuthority = anchor.web3.Keypair.generate();\n\n    signers.push(transferAuthority);\n    remainingAccounts.push({\n      pubkey: userPayingAccountAddress,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: transferAuthority.publicKey,\n      isWritable: false,\n      isSigner: true,\n    });\n\n    instructions.push(\n        Token.createApproveInstruction(\n            TOKEN_PROGRAM_ID,\n            userPayingAccountAddress,\n            transferAuthority.publicKey,\n            payer,\n            [],\n            candyMachine.state.price.toNumber(),\n        ),\n    );\n    cleanupInstructions.push(\n        Token.createRevokeInstruction(\n            TOKEN_PROGRAM_ID,\n            userPayingAccountAddress,\n            payer,\n            [],\n        ),\n    );\n  }\n  const metadataAddress = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\n      candyMachineAddress,\n  );\n\n  instructions.push(\n      await candyMachine.program.instruction.mintNft(creatorBump, {\n        accounts: {\n          candyMachine: candyMachineAddress,\n          candyMachineCreator,\n          payer: payer,\n          wallet: candyMachine.state.treasury,\n          mint: mint.publicKey,\n          metadata: metadataAddress,\n          masterEdition,\n          mintAuthority: payer,\n          updateAuthority: payer,\n          tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          systemProgram: SystemProgram.programId,\n          rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n          clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n          recentBlockhashes: anchor.web3.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n        },\n        remainingAccounts:\n            remainingAccounts.length > 0 ? remainingAccounts : undefined,\n      }),\n  );\n\n  try {\n    return (\n        await sendTransactions(\n            candyMachine.program.provider.connection,\n            candyMachine.program.provider.wallet,\n            [instructions, cleanupInstructions],\n            [signers, []],\n        )\n    ).txs.map(t => t.txid);\n  } catch (e) {\n    console.log(e);\n  }\n\n  return [];\n};\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}"],"sourceRoot":""}